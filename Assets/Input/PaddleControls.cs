//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Input/PaddleControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PaddleControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PaddleControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PaddleControls"",
    ""maps"": [
        {
            ""name"": ""Paddle"",
            ""id"": ""4ff321cb-b0e0-4589-96e0-9d4234d83d23"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""04f0145f-9df3-49b2-9e33-0aa61a805c2c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""8f26439c-4036-40ac-8ada-48aaa29e8b33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""a912c4b1-0466-4eae-a769-7c3752b5e88f"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9ebc4163-8354-4403-a6c3-3b2507ed470b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0fdca783-2d61-45be-aef5-9c78c11f4fd8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""id"": ""79b6917d-b8ea-4c31-9516-6d45e3b01425"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""380045ea-9940-42fe-9f74-ca2267c796a4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3db080ae-6267-4b6d-aad6-5a2b7be1dc16"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""XBox Keys"",
                    ""id"": ""451c8527-dd79-4cef-ace7-8c7fb1a10c3f"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5fa408f6-9f58-4d5d-be22-6769ebe44ed5"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3b4c8648-3dff-4d7b-8178-a06e73e5eb1f"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""XBox Analog"",
                    ""id"": ""984afab5-677b-4dbe-841a-0f163cdb6959"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""59fab0db-f6ab-4c3f-a71d-38d5212b7f0b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d34cd7b3-df03-4c08-b4e2-9202f6144d71"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""887b01d1-6090-4d22-a8ea-499666851fc4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd5df113-d7ac-4cc2-892b-aaae436813f2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WaitingGameplay"",
            ""id"": ""e7835ac9-5eb9-49d3-8c1c-a4118156a428"",
            ""actions"": [
                {
                    ""name"": ""Start Game"",
                    ""type"": ""Button"",
                    ""id"": ""270f24e8-ecf6-490a-89d6-d6950671f977"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2721d760-7471-43e8-87f4-9e05afcea1da"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75e266a8-dfe8-42c2-a3b4-8ccc06ebf374"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameOver"",
            ""id"": ""bd0441f0-bbf6-4814-a156-ab3b7c37d4d1"",
            ""actions"": [
                {
                    ""name"": ""Tray again"",
                    ""type"": ""Button"",
                    ""id"": ""0e48cd28-812f-48ad-acb9-a7f33e69cee5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7da465f3-dc3d-42ed-ad16-dede7abd303a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tray again"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbf85abd-3b51-4327-bfb3-a97ab62a7139"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tray again"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Paddle
        m_Paddle = asset.FindActionMap("Paddle", throwIfNotFound: true);
        m_Paddle_Movement = m_Paddle.FindAction("Movement", throwIfNotFound: true);
        m_Paddle_Action = m_Paddle.FindAction("Action", throwIfNotFound: true);
        // WaitingGameplay
        m_WaitingGameplay = asset.FindActionMap("WaitingGameplay", throwIfNotFound: true);
        m_WaitingGameplay_StartGame = m_WaitingGameplay.FindAction("Start Game", throwIfNotFound: true);
        // GameOver
        m_GameOver = asset.FindActionMap("GameOver", throwIfNotFound: true);
        m_GameOver_Trayagain = m_GameOver.FindAction("Tray again", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Paddle
    private readonly InputActionMap m_Paddle;
    private List<IPaddleActions> m_PaddleActionsCallbackInterfaces = new List<IPaddleActions>();
    private readonly InputAction m_Paddle_Movement;
    private readonly InputAction m_Paddle_Action;
    public struct PaddleActions
    {
        private @PaddleControls m_Wrapper;
        public PaddleActions(@PaddleControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Paddle_Movement;
        public InputAction @Action => m_Wrapper.m_Paddle_Action;
        public InputActionMap Get() { return m_Wrapper.m_Paddle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PaddleActions set) { return set.Get(); }
        public void AddCallbacks(IPaddleActions instance)
        {
            if (instance == null || m_Wrapper.m_PaddleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PaddleActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
        }

        private void UnregisterCallbacks(IPaddleActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
        }

        public void RemoveCallbacks(IPaddleActions instance)
        {
            if (m_Wrapper.m_PaddleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPaddleActions instance)
        {
            foreach (var item in m_Wrapper.m_PaddleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PaddleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PaddleActions @Paddle => new PaddleActions(this);

    // WaitingGameplay
    private readonly InputActionMap m_WaitingGameplay;
    private List<IWaitingGameplayActions> m_WaitingGameplayActionsCallbackInterfaces = new List<IWaitingGameplayActions>();
    private readonly InputAction m_WaitingGameplay_StartGame;
    public struct WaitingGameplayActions
    {
        private @PaddleControls m_Wrapper;
        public WaitingGameplayActions(@PaddleControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartGame => m_Wrapper.m_WaitingGameplay_StartGame;
        public InputActionMap Get() { return m_Wrapper.m_WaitingGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WaitingGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IWaitingGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_WaitingGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WaitingGameplayActionsCallbackInterfaces.Add(instance);
            @StartGame.started += instance.OnStartGame;
            @StartGame.performed += instance.OnStartGame;
            @StartGame.canceled += instance.OnStartGame;
        }

        private void UnregisterCallbacks(IWaitingGameplayActions instance)
        {
            @StartGame.started -= instance.OnStartGame;
            @StartGame.performed -= instance.OnStartGame;
            @StartGame.canceled -= instance.OnStartGame;
        }

        public void RemoveCallbacks(IWaitingGameplayActions instance)
        {
            if (m_Wrapper.m_WaitingGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWaitingGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_WaitingGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WaitingGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WaitingGameplayActions @WaitingGameplay => new WaitingGameplayActions(this);

    // GameOver
    private readonly InputActionMap m_GameOver;
    private List<IGameOverActions> m_GameOverActionsCallbackInterfaces = new List<IGameOverActions>();
    private readonly InputAction m_GameOver_Trayagain;
    public struct GameOverActions
    {
        private @PaddleControls m_Wrapper;
        public GameOverActions(@PaddleControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Trayagain => m_Wrapper.m_GameOver_Trayagain;
        public InputActionMap Get() { return m_Wrapper.m_GameOver; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameOverActions set) { return set.Get(); }
        public void AddCallbacks(IGameOverActions instance)
        {
            if (instance == null || m_Wrapper.m_GameOverActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameOverActionsCallbackInterfaces.Add(instance);
            @Trayagain.started += instance.OnTrayagain;
            @Trayagain.performed += instance.OnTrayagain;
            @Trayagain.canceled += instance.OnTrayagain;
        }

        private void UnregisterCallbacks(IGameOverActions instance)
        {
            @Trayagain.started -= instance.OnTrayagain;
            @Trayagain.performed -= instance.OnTrayagain;
            @Trayagain.canceled -= instance.OnTrayagain;
        }

        public void RemoveCallbacks(IGameOverActions instance)
        {
            if (m_Wrapper.m_GameOverActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameOverActions instance)
        {
            foreach (var item in m_Wrapper.m_GameOverActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameOverActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameOverActions @GameOver => new GameOverActions(this);
    public interface IPaddleActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
    }
    public interface IWaitingGameplayActions
    {
        void OnStartGame(InputAction.CallbackContext context);
    }
    public interface IGameOverActions
    {
        void OnTrayagain(InputAction.CallbackContext context);
    }
}
