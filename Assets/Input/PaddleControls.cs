//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Input/PaddleControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PaddleControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PaddleControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PaddleControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""4ff321cb-b0e0-4589-96e0-9d4234d83d23"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""04f0145f-9df3-49b2-9e33-0aa61a805c2c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""8f26439c-4036-40ac-8ada-48aaa29e8b33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""a912c4b1-0466-4eae-a769-7c3752b5e88f"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9ebc4163-8354-4403-a6c3-3b2507ed470b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0fdca783-2d61-45be-aef5-9c78c11f4fd8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""id"": ""79b6917d-b8ea-4c31-9516-6d45e3b01425"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""380045ea-9940-42fe-9f74-ca2267c796a4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3db080ae-6267-4b6d-aad6-5a2b7be1dc16"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""XBox Keys"",
                    ""id"": ""451c8527-dd79-4cef-ace7-8c7fb1a10c3f"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5fa408f6-9f58-4d5d-be22-6769ebe44ed5"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3b4c8648-3dff-4d7b-8178-a06e73e5eb1f"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""XBox Analog"",
                    ""id"": ""984afab5-677b-4dbe-841a-0f163cdb6959"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""59fab0db-f6ab-4c3f-a71d-38d5212b7f0b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d34cd7b3-df03-4c08-b4e2-9202f6144d71"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""887b01d1-6090-4d22-a8ea-499666851fc4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd5df113-d7ac-4cc2-892b-aaae436813f2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameStart"",
            ""id"": ""e7835ac9-5eb9-49d3-8c1c-a4118156a428"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""270f24e8-ecf6-490a-89d6-d6950671f977"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2721d760-7471-43e8-87f4-9e05afcea1da"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75e266a8-dfe8-42c2-a3b4-8ccc06ebf374"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameLost"",
            ""id"": ""bd0441f0-bbf6-4814-a156-ab3b7c37d4d1"",
            ""actions"": [
                {
                    ""name"": ""Tray again"",
                    ""type"": ""Button"",
                    ""id"": ""0e48cd28-812f-48ad-acb9-a7f33e69cee5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7da465f3-dc3d-42ed-ad16-dede7abd303a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tray again"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbf85abd-3b51-4327-bfb3-a97ab62a7139"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tray again"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameEnded"",
            ""id"": ""fc7f2d62-dfa7-4c0a-9b41-c31e4c2da352"",
            ""actions"": [
                {
                    ""name"": ""Acept"",
                    ""type"": ""Button"",
                    ""id"": ""ea2ad8eb-2bc4-4a2e-aea7-3f7aa7be73e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eb8132a1-162f-4170-90dd-a7a0fffc8a69"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4c5f54c-e9a5-4a90-897a-c223cc79684f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
        m_Gameplay_Action = m_Gameplay.FindAction("Action", throwIfNotFound: true);
        // GameStart
        m_GameStart = asset.FindActionMap("GameStart", throwIfNotFound: true);
        m_GameStart_Start = m_GameStart.FindAction("Start", throwIfNotFound: true);
        // GameLost
        m_GameLost = asset.FindActionMap("GameLost", throwIfNotFound: true);
        m_GameLost_Trayagain = m_GameLost.FindAction("Tray again", throwIfNotFound: true);
        // GameEnded
        m_GameEnded = asset.FindActionMap("GameEnded", throwIfNotFound: true);
        m_GameEnded_Acept = m_GameEnded.FindAction("Acept", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Movement;
    private readonly InputAction m_Gameplay_Action;
    public struct GameplayActions
    {
        private @PaddleControls m_Wrapper;
        public GameplayActions(@PaddleControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
        public InputAction @Action => m_Wrapper.m_Gameplay_Action;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // GameStart
    private readonly InputActionMap m_GameStart;
    private List<IGameStartActions> m_GameStartActionsCallbackInterfaces = new List<IGameStartActions>();
    private readonly InputAction m_GameStart_Start;
    public struct GameStartActions
    {
        private @PaddleControls m_Wrapper;
        public GameStartActions(@PaddleControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_GameStart_Start;
        public InputActionMap Get() { return m_Wrapper.m_GameStart; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameStartActions set) { return set.Get(); }
        public void AddCallbacks(IGameStartActions instance)
        {
            if (instance == null || m_Wrapper.m_GameStartActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameStartActionsCallbackInterfaces.Add(instance);
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
        }

        private void UnregisterCallbacks(IGameStartActions instance)
        {
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
        }

        public void RemoveCallbacks(IGameStartActions instance)
        {
            if (m_Wrapper.m_GameStartActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameStartActions instance)
        {
            foreach (var item in m_Wrapper.m_GameStartActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameStartActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameStartActions @GameStart => new GameStartActions(this);

    // GameLost
    private readonly InputActionMap m_GameLost;
    private List<IGameLostActions> m_GameLostActionsCallbackInterfaces = new List<IGameLostActions>();
    private readonly InputAction m_GameLost_Trayagain;
    public struct GameLostActions
    {
        private @PaddleControls m_Wrapper;
        public GameLostActions(@PaddleControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Trayagain => m_Wrapper.m_GameLost_Trayagain;
        public InputActionMap Get() { return m_Wrapper.m_GameLost; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameLostActions set) { return set.Get(); }
        public void AddCallbacks(IGameLostActions instance)
        {
            if (instance == null || m_Wrapper.m_GameLostActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameLostActionsCallbackInterfaces.Add(instance);
            @Trayagain.started += instance.OnTrayagain;
            @Trayagain.performed += instance.OnTrayagain;
            @Trayagain.canceled += instance.OnTrayagain;
        }

        private void UnregisterCallbacks(IGameLostActions instance)
        {
            @Trayagain.started -= instance.OnTrayagain;
            @Trayagain.performed -= instance.OnTrayagain;
            @Trayagain.canceled -= instance.OnTrayagain;
        }

        public void RemoveCallbacks(IGameLostActions instance)
        {
            if (m_Wrapper.m_GameLostActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameLostActions instance)
        {
            foreach (var item in m_Wrapper.m_GameLostActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameLostActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameLostActions @GameLost => new GameLostActions(this);

    // GameEnded
    private readonly InputActionMap m_GameEnded;
    private List<IGameEndedActions> m_GameEndedActionsCallbackInterfaces = new List<IGameEndedActions>();
    private readonly InputAction m_GameEnded_Acept;
    public struct GameEndedActions
    {
        private @PaddleControls m_Wrapper;
        public GameEndedActions(@PaddleControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Acept => m_Wrapper.m_GameEnded_Acept;
        public InputActionMap Get() { return m_Wrapper.m_GameEnded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameEndedActions set) { return set.Get(); }
        public void AddCallbacks(IGameEndedActions instance)
        {
            if (instance == null || m_Wrapper.m_GameEndedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameEndedActionsCallbackInterfaces.Add(instance);
            @Acept.started += instance.OnAcept;
            @Acept.performed += instance.OnAcept;
            @Acept.canceled += instance.OnAcept;
        }

        private void UnregisterCallbacks(IGameEndedActions instance)
        {
            @Acept.started -= instance.OnAcept;
            @Acept.performed -= instance.OnAcept;
            @Acept.canceled -= instance.OnAcept;
        }

        public void RemoveCallbacks(IGameEndedActions instance)
        {
            if (m_Wrapper.m_GameEndedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameEndedActions instance)
        {
            foreach (var item in m_Wrapper.m_GameEndedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameEndedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameEndedActions @GameEnded => new GameEndedActions(this);
    public interface IGameplayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
    }
    public interface IGameStartActions
    {
        void OnStart(InputAction.CallbackContext context);
    }
    public interface IGameLostActions
    {
        void OnTrayagain(InputAction.CallbackContext context);
    }
    public interface IGameEndedActions
    {
        void OnAcept(InputAction.CallbackContext context);
    }
}
